{"version":3,"sources":["MapChart.js","ApexChartsWrapper.js","CustomizedContainer.js","LineChartWrapper.js","OperationalDashboard.js","NotificationBoard.js","LiveClock.js","UptimeMonitor.js","ReactStatistics.js","ActionDashboard.js","HeatmapWrapper.js","EndpointData.js","App.js","serviceWorker.js","index.js"],"names":["colorScale","scaleLinear","domain","range","countryMap","memo","setTooltipContent","data-tip","projectionConfig","scale","height","geography","geographies","map","geo","key","rsmKey","onMouseEnter","properties","NAME","POP_EST","onMouseLeave","style","default","fill","ISO_A3","outline","stroke","strokeWidth","strokeOpacity","hover","DonutChartWrapper","props","series","categories","id","total_descr","size","undefined","state","options","labels","dataLabels","enabled","chart","fontFamily","foreColor","offsetX","offsetY","colors","plotOptions","radialBar","startAngle","endAngle","hollow","margin","background","name","fontSize","value","total","show","label","formatter","w","config","reduce","i","j","curve","lineCap","this","type","width","React","Component","CustomizedContainer","title","icon","sz","className","gridColumn","textAlign","marginLeft","children","LineChart","axisname","data","stacked","zoom","autoScaleYaxis","toolbar","autoSelected","markers","text","align","grid","borderColor","row","opacity","gradient","shadeIntensity","gradientToColors","inverseColors","opacityFrom","opacityTo","stops","yaxis","val","toFixed","xaxis","tooltip","shared","y","LabeledCheckbox","onChange","setState","display","alignItems","checked","marginRight","OperationalDashboard","toggleChecked","checkbox","paddingTop","marginTop","marginBottom","defaultChecked","NotificationBoard","message_components","messages","length","push","date","content","LiveClock","startdate","textdate","format","Date","getTime","setInterval","formatHour","clearInterval","UptimeMonitor","currentTimestamp","updateTime","update2Time","update3Time","Item","color","StatisticsRender","threats","fetch","then","response","json","threats_json","messages_json","x","split","date_set","forEach","elem","console","log","attack_graph","Object","entries","today_attacks","mean","freq","reverse","EndpointData","App","useState","Navbar","collapseOnSelect","expand","variant","sticky","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.02ba65dc.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\nimport {\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography\r\n} from \"react-simple-maps\";\r\nimport { scaleLinear } from \"d3-scale\";\r\n\r\nconst geoUrl =\r\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\r\n\r\nconst colorScale = scaleLinear()\r\n  .domain([0.01, 1.00])\r\n  .range([\"#FAFA0D\", \"#ff0a0d\"]);\r\n\r\nconst countryMap = {\r\n  'ITA': 0.39,\r\n  'RUS': 0.84,\r\n  'USA': 0.65,\r\n  'CHN': 0.77,\r\n  'DEU': 0.41,\r\n  'FRA': 0.31,\r\n  'ROU': 0.35,\r\n  'JPN': 0.21,\r\n  'BRA': 0.41,\r\n  'MEX': 0.21,\r\n  'CAN': 0.33,\r\n  'NED': 0.36,\r\n  'POL': 0.12,\r\n  'ESP': 0.22,\r\n  'PRT': 0.23\r\n};\r\n\r\nfunction getColorFromMap(key, map) {\r\n  if(key in map)\r\n    return colorScale(map[key]);\r\n  return '#0a0a0d';\r\n}\r\n\r\nconst MapChart = ({ setTooltipContent }) => {\r\n  return (\r\n    <>\r\n      <ComposableMap\r\n            data-tip=\"\"\r\n            projectionConfig={{ scale: 100 }}\r\n            height={350}\r\n      >\r\n        <Geographies geography={geoUrl}>\r\n          {({ geographies }) =>\r\n            geographies.map(geo => (\r\n              <Geography\r\n                key={geo.rsmKey}\r\n                geography={geo}\r\n                onMouseEnter={() => {\r\n                  const { NAME, POP_EST } = geo.properties;\r\n                  setTooltipContent(`${NAME} — ${POP_EST}`);\r\n                }}\r\n                onMouseLeave={() => {\r\n                  setTooltipContent(\"\");\r\n                }}\r\n                style={{\r\n                  default: {\r\n                    fill: getColorFromMap(geo.properties.ISO_A3, countryMap),\r\n                    outline: \"none\",\r\n                    stroke: \"#4a4a4d\",\r\n                    strokeWidth: \"0.5px\",\r\n                    strokeOpacity: \"0.5\"\r\n                  },\r\n                  hover: {\r\n                    fill: \"#eaeaea\",\r\n                    outline: \"none\"\r\n                  }\r\n                }}\r\n              />\r\n            ))\r\n          }\r\n        </Geographies>\r\n      </ComposableMap>\r\n    </>\r\n  );\r\n};\r\n  \r\n  export default memo(MapChart);","import React from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\n\r\nclass DonutChartWrapper extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.series = this.props.series;\r\n        this.categories = this.props.categories;\r\n        this.id = this.props.id;\r\n        this.total_descr = this.props.total_descr;\r\n        this.size = (this.props.size === undefined) ? \"60%\" : this.props.size;\r\n\r\n        this.state = {\r\n            options: {},\r\n            series: this.series,\r\n            labels: this.categories,\r\n            dataLabels: {\r\n                enabled: true\r\n            },\r\n            chart: {\r\n                fontFamily: 'Oxanium',\r\n                foreColor: '#eaeaea',\r\n                offsetX: 0,\r\n                offsetY: 20\r\n            },\r\n            colors: ['#581f79'],\r\n            plotOptions : {\r\n                radialBar: {\r\n                    startAngle: -135,\r\n                    endAngle: 135,\r\n                    hollow: {\r\n                        margin: 0,\r\n                        size: '60%',\r\n                        background: '#eabaea22',\r\n                    },\r\n                    dataLabels: {\r\n                        name: {\r\n                            fontSize: '22px',\r\n                        },\r\n                        value: {\r\n                            fontSize: '16px',\r\n                        },\r\n                        total: {\r\n                            show: true,\r\n                            label: this.total_descr,\r\n                            formatter: function (w) {\r\n                                return w.config.series.reduce((i, j) => i + j) + '%';\r\n                              }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            stroke: {\r\n                curve: 'straight',\r\n                lineCap: 'square',\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Chart\r\n                    options={this.state}\r\n                    series={this.props.series}\r\n                    categories={this.categories}\r\n                    type=\"radialBar\"\r\n                    width={this.size}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default DonutChartWrapper;\r\n","import React from 'react';\r\n\r\nclass CustomizedContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.props = props;\r\n        this.title = (this.props.title === undefined) ? undefined : this.props.title;\r\n        this.icon = (this.props.icon === undefined) ? undefined : this.props.icon;\r\n        this.sz = (this.props.sz === undefined) ? undefined : this.props.sz;\r\n        this.id = this.props.id;\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <div id={this.id} className=\"grid-container-sub\" style={{gridColumn: this.sz, height: \"100%\"}}>\r\n                <p style={{textAlign: \"left\", marginLeft: \"50px\"}}>{this.title}</p>\r\n                <div className=\"filled-container\" style={{height: \"100%\"}}>\r\n                    {this.props.children}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CustomizedContainer;","import React from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\n\r\nclass LineChart extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.title = this.props.title;\r\n        this.name = this.props.name;\r\n        this.axisname = this.props.axisname;\r\n        this.height = (this.props.height === undefined) ? 350 : this.props.height;\r\n\r\n        this.state = {\r\n            series: [{\r\n                name: this.name,\r\n                data: this.props.data\r\n            }],\r\n            options: {\r\n                chart: {\r\n                    type: 'area',\r\n                    stacked: false,\r\n                    height: this.height,\r\n                    fontFamily: 'Oxanium',\r\n                    foreColor: '#eaeaea',\r\n                    zoom: {\r\n                        type: 'x',\r\n                        enabled: true,\r\n                        autoScaleYaxis: true\r\n                    },\r\n                    toolbar: {\r\n                        show: false,\r\n                        autoSelected: 'zoom'\r\n                    }\r\n                },\r\n                colors: ['#581f79'],\r\n                dataLabels: {\r\n                    enabled: false\r\n                },\r\n                markers: {\r\n                    size: 1,\r\n                },\r\n                title: {\r\n                    text: this.title,\r\n                    align: 'left'\r\n                },\r\n                grid: {\r\n                    borderColor: '#222',\r\n                    row: {\r\n                      colors: ['transparent'], // takes an array which will be repeated on columns\r\n                      opacity: 0.8\r\n                    },\r\n                },\r\n                fill: {\r\n                    type: 'gradient',\r\n                    gradient: {\r\n                        shadeIntensity: 1,\r\n                        gradientToColors: ['#541b75'],\r\n                        inverseColors: false,\r\n                        opacityFrom: 0.65,\r\n                        opacityTo: 0.4,\r\n                        stops: [0, 40, 100]\r\n                    },\r\n                },\r\n                yaxis: {\r\n                    labels: {\r\n                        formatter: function (val) {\r\n                            return val.toFixed(0);\r\n                        }\r\n                    },\r\n                    title: {\r\n                        text: this.axisname\r\n                    },\r\n                },\r\n                xaxis: {\r\n                    type: 'datetime',\r\n                },\r\n                tooltip: {\r\n                    shared: false,\r\n                    y: {\r\n                        formatter: function (val) {\r\n                            return val.toFixed(0);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div>\r\n                <Chart options={this.state.options} series={[{name: this.props.name, data: this.props.data}]} type=\"area\" height={this.height} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LineChart;","import React from \"react\";\r\nimport { Switch, Checkbox } from 'antd';\r\n\r\nclass LabeledCheckbox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            label: this.props.label,\r\n            enabled: (this.props.enabled === undefined) ? false : this.props.enabled\r\n        }\r\n    }\r\n\r\n    onChange = () => {\r\n        this.setState({\r\n            enabled: !this.state.enabled\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <p style={{display: 'flex', alignItems: 'center'}}>\r\n                <Checkbox checked={this.state.enabled} onChange={this.onChange} style={{marginRight: '10px'}}/>\r\n                {this.state.label}\r\n            </p>\r\n        );\r\n    }\r\n}\r\n\r\nclass OperationalDashboard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    \r\n    toggleChecked = (i) => {\r\n        this.setState({ checked: !this.state.checkbox[i].checked })\r\n    }\r\n\r\n    render() { \r\n        return (\r\n            <div className=\"grid-one-column\" style={{marginLeft: \"30px\", marginRight: \"30px\"}} >\r\n                <div style={{margin: \"0px\", paddingTop: \"0px\"}}>\r\n                    <p style={{display: 'flex', alignItems: 'center', marginTop: \"30px\", marginBottom: \"50px\"}}>\r\n                        <Switch defaultChecked={true} style={{marginRight: '20px'}}/>\r\n                        System Status\r\n                    </p>\r\n                    <p>Monitored Endpoints</p>\r\n                    <div className=\"grid-two-columns-nogap\">\r\n                        <LabeledCheckbox enabled={true} label='192.168.1.2' />\r\n                        <LabeledCheckbox enabled={true} label='192.168.1.3' />\r\n                        <LabeledCheckbox enabled={true} label='192.168.1.4' />\r\n                        <LabeledCheckbox enabled={true} label='192.168.1.5' />\r\n                        <LabeledCheckbox enabled={true} label='192.168.1.6' />\r\n                        <LabeledCheckbox enabled={true} label='192.168.1.7' />\r\n                        <LabeledCheckbox enabled={true} label='192.168.1.8' />\r\n                        <LabeledCheckbox enabled={true} label='192.168.1.9' />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default OperationalDashboard;","import React from 'react';\r\n\r\nclass NotificationBoard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let message_components = [];\r\n        for (let i = 0; i < this.props.messages.length; ++i) {\r\n            message_components.push(\r\n                <div key={i} className=\"notification\">\r\n                    <p>{this.props.messages[i].date} {this.props.messages[i].content}</p>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"grid-one-column-nogap chatbox-container\">\r\n                <div className=\"messages-container\">\r\n                    {message_components}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NotificationBoard;","import React from 'react';\r\nimport { format } from 'date-fns';\r\n\r\nclass LiveClock extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            startdate: (this.props.startdate === undefined) ? undefined : this.props.startdate,\r\n            textdate: format(new Date((this.props.startdate === undefined) ? (new Date().getTime()) : this.props.startdate), \"dd/MM/yyyy HH:mm:ss a\")\r\n        }\r\n    }\r\n\r\n    formatHour() {\r\n        if (this.state.startdate === undefined)\r\n            return format(new Date(), \"dd/MM/yyyy HH:mm:ss a\");\r\n\r\n        return this.state.textdate;\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(this.state.startdate === undefined) {\r\n            setInterval(\r\n                () => {\r\n                    this.setState({textdate: this.formatHour()});\r\n                }, 1000\r\n            );\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if(this.state.startdate === undefined) {\r\n            clearInterval(this.state.startdate);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <span>\r\n                {this.state.textdate}\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LiveClock;","import React from 'react';\r\nimport { Timeline } from 'antd';\r\nimport LiveClock from \"./LiveClock.js\";\r\n\r\nclass UptimeMonitor extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() { \r\n        let currentTimestamp = new Date().getTime();\r\n        let updateTime = currentTimestamp - 7 * 60 * 60 * 24 * 1000;\r\n        let update2Time = currentTimestamp - 13 * 60 * 60 * 24 * 1000;\r\n        let update3Time = currentTimestamp - 20 * 60 * 60 * 24 * 1000;\r\n\r\n        return (\r\n            <div className=\"grid-one-column-nogap\" >\r\n                <Timeline style={{marginLeft: '10px'}}>\r\n                    <Timeline.Item color='#581f79'>\r\n                        <p>Running at <LiveClock /></p>\r\n                    </Timeline.Item>\r\n                    <Timeline.Item color='#581f79'>\r\n                        <p>Updated at <LiveClock startdate={updateTime}/></p>\r\n                    </Timeline.Item>\r\n                    <Timeline.Item color='#581f79'>\r\n                        <p>Updated at <LiveClock startdate={update2Time}/></p>\r\n                    </Timeline.Item>\r\n                    <Timeline.Item color='#581f79'>\r\n                        <p>Deployed at <LiveClock startdate={update3Time}/></p>\r\n                    </Timeline.Item>\r\n                </Timeline>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UptimeMonitor;","import React, { useState, useEffect } from 'react';\r\nimport DonutChartWrapper from \"./ApexChartsWrapper.js\";\r\nimport CustomizedContainer from \"./CustomizedContainer.js\";\r\nimport LineChart from \"./LineChartWrapper.js\";\r\nimport OperationalDashboard from \"./OperationalDashboard.js\";\r\nimport NotificationBoard from \"./NotificationBoard.js\";\r\nimport UptimeMonitor from \"./UptimeMonitor.js\";\r\nimport ActionDashboard from \"./ActionDashboard.js\";\r\nimport { format } from \"date-fns\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"antd/dist/antd.css\";\r\n\r\nconst generate_plot_data = (size, multip) => {\r\n    let current_timestamp = new Date().getTime();\r\n    let day_decrease = 60 * 60 * 24 * 1000;\r\n    let current_time = 0;\r\n    let y_test = 0;\r\n    let data = [];\r\n    \r\n    for(let i = size; i > 0; --i) {\r\n        current_time = new Date(current_timestamp - (day_decrease * i)).getTime();\r\n        y_test = Math.floor((Math.random() + 1) * multip);\r\n        data.push({x: current_time, y: y_test});\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\nclass StatisticsRender extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      threats: [],\r\n      messages: []\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('http://icnc.go.ro:23231/api/threats?limit=1500')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          let threats_json = data['threats'];\r\n          let messages_json = threats_json.map(x => {\r\n            return {\r\n              date: \"[\" + x[0] + \"] \",\r\n              content: \"Recorded new attack on endpoint \" + x[2].split(\":\")[0] + \". Type: \" + x[1]\r\n            }\r\n          });\r\n\r\n          this.setState({ threats: threats_json, messages: messages_json});\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let date_set = {};\r\n    let plot_data = this.state.threats.forEach(\r\n      elem => {\r\n        let date = elem[0].split(\" \")[0];\r\n        if(date_set[date] !== undefined) {\r\n          date_set[date] += 1;\r\n        } else {\r\n          date_set[date] = 0;\r\n        }\r\n      }\r\n    )\r\n\r\n    console.log(date_set);\r\n\r\n    let attack_graph = Object.entries(date_set).map(elem => {\r\n      return {\r\n        x: new Date(elem[0]),\r\n        y: elem[1]\r\n      }\r\n    });\r\n\r\n    attack_graph = attack_graph.reverse();\r\n    let today_attacks = 0, mean = 0, freq = 0;\r\n    \r\n    if(attack_graph.length == 0 || attack_graph.length == 1) {\r\n      today_attacks = 0;\r\n      mean = 0;\r\n    }\r\n    else {\r\n      today_attacks = attack_graph[attack_graph.length - 1].y;\r\n\r\n      for(let i = 0; i < attack_graph.length - 1; ++i) {\r\n        mean += attack_graph[i].y;\r\n      }\r\n    \r\n      mean = mean / (attack_graph.length - 1);\r\n      freq = (today_attacks / mean * 100.0).toFixed(2);\r\n    }\r\n\r\n    return (\r\n      <div className=\"bodyContainer\">\r\n          <div className=\"grid-twelve-columns\" style={{marginTop: 50}}>\r\n              <CustomizedContainer id=\"operational-board\" title=\"Operational Dashboard\" sz=\"span 3\">\r\n                  <OperationalDashboard />\r\n              </CustomizedContainer>\r\n\r\n\r\n              <CustomizedContainer id=\"uptime-board\" title=\"Uptime Monitor\" sz=\"span 2\">\r\n                  <UptimeMonitor />\r\n              </CustomizedContainer>\r\n\r\n              <CustomizedContainer id=\"notification-board\" title=\"Notification Log\" sz=\"span 7\">\r\n                  <NotificationBoard messages={this.state.messages} />\r\n              </CustomizedContainer>\r\n\r\n          </div>\r\n\r\n          <div className=\"grid-twelve-columns\" style={{marginTop: 50}}>\r\n              <CustomizedContainer title=\"Attack Frequency\" sz=\"span 3\">\r\n                  <DonutChartWrapper categories={[\"Frequency\"]} series={[freq]} total_descr={\"Frequency\"} size={\"100%\"} />\r\n              </CustomizedContainer>\r\n\r\n              <CustomizedContainer title=\"Latest attacks\" sz=\"span 9\">\r\n                  <LineChart name=\"Attacks\" data={attack_graph} height={280} />\r\n              </CustomizedContainer>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StatisticsRender;","import React from 'react';\r\nimport { Button } from \"antd\";\r\nimport { DownloadOutlined, ReloadOutlined, PoweroffOutlined } from '@ant-design/icons';\r\n\r\nclass ActionDashboard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"grid-one-column-nogap\" style={{marginTop: '100px'}}>\r\n                <Button type=\"primary\" icon={<DownloadOutlined />} style={{marginLeft: '30px', marginRight: '30px' }}>\r\n                    Update firmware\r\n                </Button>\r\n\r\n                <Button type=\"primary\" icon={<ReloadOutlined />} style={{marginLeft: '30px', marginRight: '30px'}}>\r\n                    Restart\r\n                </Button>\r\n\r\n                <Button type=\"primary\" icon={<PoweroffOutlined />} style={{marginLeft: '30px', marginRight: '30px'}}>\r\n                    Power off\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ActionDashboard;","import React from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\n\r\nclass HeatMapWrapper extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.series = this.props.series;\r\n\r\n        this.state = {\r\n            series: [{\r\n                name: 'Jan',\r\n                data: this.series[0]['Data']\r\n              },\r\n              {\r\n                name: 'Feb',\r\n                data: this.series[1]['Data']\r\n              },\r\n              {\r\n                name: 'Mar',\r\n                data: this.series[2]['Data']\r\n              },\r\n              {\r\n                name: 'Apr',\r\n                data: this.series[3]['Data']\r\n              },\r\n              {\r\n                name: 'May',\r\n                data: this.series[4]['Data']\r\n              },\r\n              {\r\n                name: 'Jun',\r\n                data: this.series[5]['Data']\r\n              },\r\n              {\r\n                name: 'Jul',\r\n                data: this.series[6]['Data']\r\n              },\r\n              {\r\n                name: 'Aug',\r\n                data: this.series[7]['Data']\r\n              },\r\n              {\r\n                name: 'Sep',\r\n                data: this.series[8]['Data']\r\n              },\r\n              {\r\n                name: 'Oct',\r\n                data: this.series[9]['Data']\r\n              },\r\n              {\r\n                name: 'Nov',\r\n                data: this.series[10]['Data']\r\n              },\r\n              {\r\n                name: 'Dec',\r\n                data: this.series[11]['Data']\r\n              }\r\n            ],\r\n            options: {\r\n              chart: {\r\n                height: 600,\r\n                type: 'heatmap',\r\n                fontFamily: 'Oxanium',\r\n                foreColor: '#eaeaea'\r\n              },\r\n              legend: {\r\n                  show: true\r\n              },\r\n              plotOptions: {\r\n                heatmap: {\r\n                  shadeIntensity: 0.5,\r\n              \r\n                  colorScale: {\r\n                    ranges: [{\r\n                        from: -10,\r\n                        to: 25,\r\n                        name: 'low',\r\n                        color: '#00A100'\r\n                      },\r\n                      {\r\n                        from: 25,\r\n                        to: 50,\r\n                        name: 'medium',\r\n                        color: '#128FD9'\r\n                      },\r\n                      {\r\n                        from: 50,\r\n                        to: 75,\r\n                        name: 'high',\r\n                        color: '#FFB200'\r\n                      },\r\n                      {\r\n                        from: 75,\r\n                        to: 100,\r\n                        name: 'extreme',\r\n                        color: '#FF0000'\r\n                      }\r\n                    ]\r\n                  }\r\n                }\r\n              },\r\n              dataLabels: {\r\n                enabled: true\r\n              },\r\n              title: {\r\n                text: 'Endpoint Heatmap - Attacks per Month'\r\n              },\r\n              responsive: [{\r\n                breakpoint: 1000,\r\n                options: {\r\n                  chart: {\r\n                    width: 500,\r\n                    fontSize: '10px'\r\n                  },\r\n                  legend: {\r\n                    show: false,\r\n                  }\r\n                }\r\n              }]\r\n             },\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Chart\r\n                options={this.state.options}\r\n                series={this.state.series}\r\n                width=\"1000\"\r\n                type=\"heatmap\"\r\n            >\r\n            </Chart>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HeatMapWrapper;","import React from 'react';\r\nimport HeatMapWrapper from './HeatmapWrapper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nfunction EndpointData() {\r\n    const data_series = [\r\n        {'Data':[21, 6, 42, 35, 12, 13, 30, 62]},\r\n        {'Data':[31, 51, 22, 34, 15, 25, 19, 7]},\r\n        {'Data':[1, 3, 6, 15, 27, 21, 14, 12]},\r\n        {'Data':[14, 3, 8, 9, 22, 74, 1, 5]},\r\n        {'Data':[81, 5, 60, 40, 5, 8, 24, 55]},\r\n        {'Data':[67, 48, 43, 26, 45, 89, 53, 25]},\r\n        {'Data':[22, 71, 79, 46, 21, 48, 45, 59]},\r\n        {'Data':[95, 86, 44, 65, 96, 14, 95, 7]},\r\n        {'Data':[47, 41, 67, 59, 67, 49, 44, 84]},\r\n        {'Data':[59, 91, 60, 54, 64, 70, 10, 4]},\r\n        {'Data':[47, 23, 6, 31, 39, 14, 31, 98]},\r\n        {'Data':[14, 45, 54, 63, 77, 5, 79, 71]}\r\n    ];\r\n\r\n    return (\r\n        <div className=\"bodyContainer\">\r\n            <h1 style={{textAlign: \"center\", marginTop: 20, marginBottom: 20 }}>Threat Hunter - Endpoint Data</h1>\r\n\r\n            <Grid\r\n                container\r\n                spacing={0}\r\n                direction=\"column\"\r\n                alignItems=\"center\"\r\n                justify=\"center\"\r\n                style={{marginTop: 100}}\r\n            >\r\n                <Grid item xs>\r\n                    <HeatMapWrapper series={data_series} />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EndpointData;","import React, { useState } from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport MapChart from \"./MapChart\";\nimport StatisticsRender from \"./ReactStatistics\";\nimport EndpointData from \"./EndpointData\";\nimport { Navbar, Nav } from 'react-bootstrap';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\nfunction App() {\n  const [content, setContent] = useState(\"\");\n  return (\n     <Router>\n      <Navbar collapseOnSelect expand=\"lg\" className=\"navbar-global\" variant=\"dark\" sticky=\"top\" >\n        <Navbar.Brand href=\"/home\">Threat Hunter</Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"/\">Control Panel</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n\n      <Switch>\n        <Route path=\"/\">\n          <StatisticsRender />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}
